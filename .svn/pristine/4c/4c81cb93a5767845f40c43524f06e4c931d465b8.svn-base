import java.util.Vector;
import javax.swing.JOptionPane;

public class AlgoritmoGenetico {

	// Constructor de la clase AlgoritmoGenetico
	/*
	 * Se crea un nuevo objeto de tipo AlgoritmoGenetico pasando al constructor
	 * de dicha clase las siguientes caracter’sticas de la secuencia: - Tama–o
	 * del Gap. - Nœmero de secuencias a analizar. - Objeto de tipo
	 * AlineamientoMultipleSecuencias.
	 */
	public AlgoritmoGenetico(int itamanyoGap, int inumeroSecuencias,
			AlineamientoMultipleSecuencias aM) {

		// Ejemplo del constructor.
		// AlgoritmoGenetico algoritmoGenetico1 = new AlgoritmoGenetico(
		// alineamiento1.tamanyoGap, alineamiento1.numeroSecuencias,
		// alineamiento1);

		tamanyoGap = itamanyoGap;
		numeroSecuencias = inumeroSecuencias;
		vectorAlgoritmoGenetico = new Vector<Vector<Integer[][]>>();
		fitness = new Vector<Vector<Double>>();
		nuevo_vectorAlgoritmoGenetico = new Vector<Vector<Integer[][]>>();
		nuevo_vectorFitness = new Vector<Vector<Double>>();
		for (int i = 0; i < numeroPoblacion; i++) {
			vectorAlgoritmoGenetico.add(new Vector<Integer[][]>());
			fitness.add(new Vector<Double>());
			nuevo_vectorAlgoritmoGenetico.add(new Vector<Integer[][]>());
			nuevo_vectorFitness.add(new Vector<Double>());
		}

		ams = aM;
		generacion = 0;
		fitness_medio = new double[numeroPoblacion];
		fitness_minimo = new double[numeroPoblacion];
		fitness_maximo = new double[numeroPoblacion];
		tasaMigracion = new double[numeroPoblacion];
		nuevoFitness = new double[numeroPoblacion];
		antiguoFitness = new double[numeroPoblacion];
		poblacionAleatoria();
		eliteF = 1;
		eliteI = new int[3];
		eliteI[0] = eliteI[1] = eliteI[2] = 0;
		mejorResultado();
		vector_eliteAntiguos = elites;
		for (int i = 0; i < numeroPoblacion; i++) {
			tasaMigracion[i] = 0.15;
			antiguoFitness[i] = 0;
		}
	}

	/*----------------------------------------*/
	public void ejecutarAlgoritmoGenetico() {
		generacion++;

		System.out.println("----------------------------");
		System.out.println("Algoritmos Genetico - Datos.");
		System.out.println("Tama–o de la poblacion = " + this.numeroPoblacion);
		System.out.println("Numero de generaciones = "
				+ this.numeroGeneraciones);

		System.out.println("Valor de cruce = " + this.cruce);
		System.out.println("Valor de mutacion = " + this.mutacion);
		System.out.println("----------------------------");

		cruzar();
		mutar();
		remplazar();
	}

	/*----------------------------------------*/

	public void cruzar() {
		int type = 0;

		if (Math.random() >= 2.0 / 3.0) {
			type = 1;
		} else if (Math.random() >= 1.0 / 3.0) {
			type = 2;
		}
	}

	public void mutar() {
		int type = 0;
		if (Math.random() >= 2.0 / 3.0) {
			type = 1;
		} else if (Math.random() >= 1.0 / 3.0) {
			type = 2;
		}
	}

	/**
	 * Se reemplaza los primeros elementos de la poblaci—n actual con los
	 * elementos de la nueva poblaci—n.
	 */
	public void remplazar() {
		poblacionNueva = new Integer[numeroPoblacion][][][];
		fitnessNuevo = new Double[numeroPoblacion][];
		orden = new Integer[numeroPoblacion][];
		for (int k = 0; k < numeroPoblacion; k++) {
			int n = vectorAlgoritmoGenetico.get(k).size();
			int n2 = nuevo_vectorAlgoritmoGenetico.get(k).size();
			poblacionNueva[k] = new Integer[n + n2][numeroSecuencias][tamanyoGap];
			fitnessNuevo[k] = new Double[n + n2];
			orden[k] = new Integer[n + n2];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < numeroSecuencias; j++)
					poblacionNueva[k][i][j] = copiar(vectorAlgoritmoGenetico
							.get(k).get(i)[j]);
				fitnessNuevo[k][i] = fitness.get(k).get(i);
				orden[k][i] = i;
			}
			for (int i = 0; i < n2; i++) {
				for (int j = 0; j < numeroSecuencias; j++)
					poblacionNueva[k][n + i][j] = copiar(nuevo_vectorAlgoritmoGenetico
							.get(k).get(i)[j]);
				fitnessNuevo[k][n + i] = nuevo_vectorFitness.get(k).get(i);
				orden[k][n + i] = n + i;
			}
			// Ordenaci—n basada en el fitness o aptitud.
			ordenar(fitnessNuevo[k], orden[k]);

			// Copiado
			vectorAlgoritmoGenetico.get(k).clear();
			fitness.get(k).clear();
			nuevo_vectorAlgoritmoGenetico.get(k).clear();
			nuevo_vectorFitness.get(k).clear();
			fitness_medio[k] = 0;
			for (int i = 0; i < n; i++) {
				int index = (int) Math.random() * i;
				vectorAlgoritmoGenetico.get(k).add(index,
						poblacionNueva[k][orden[k][i]]);
				fitness.get(k).add(index, fitnessNuevo[k][orden[k][i]]);
				fitness_medio[k] += fitnessNuevo[k][orden[k][i]];
			}

		}

	}

	public void poblacionAleatoria() {
		for (int i = 0; i < numeroPoblacion; i++) {
			for (int j = 0; j < numeroGeneraciones / numeroPoblacion; j++) {
				Integer[][] temp = new Integer[numeroSecuencias][tamanyoGap];
				for (int k = 0; k < numeroSecuencias; k++) {

					for (int n = 0; n < tamanyoGap; n++) {
						temp[k][n] = 1;
					}
				}
				reconstruir(temp, null);
				vectorAlgoritmoGenetico.get(i).add(temp);
				fitness.get(i).add(dameFitness(temp));
			}
		}
	}

	// Using the sum of pairs for calculating
	public static double dameFitness(Integer[][] indiv) {
		double sumaTotal = 0;
		double[] sumaDePares = new double[tamanyoGap];
		int[] tamanyoNumeroSecuencias = new int[numeroSecuencias];
		char[] columna = new char[indiv.length];
		int coincidencias = 0;
		for (int n = 0; n < numeroSecuencias; n++) {
			tamanyoNumeroSecuencias[n] = -1;
		}
		for (int c = 0; c < tamanyoGap; c++) {
			boolean ultimoAlgoritmoGenetico = true;
			for (int n = 0; n < numeroSecuencias; n++) {
				if (indiv[n][c] == 1) {
					tamanyoNumeroSecuencias[n]++;
					columna[n] = ams.getChar(n, tamanyoNumeroSecuencias[n]);
				} else
					columna[n] = '-';
				if (c > 0 && indiv[n][c - 1] == 1)
					ultimoAlgoritmoGenetico = false;
			}
			sumaDePares[c] = 0;
			for (int s = 0; s < numeroSecuencias - 1; s++) {
				char cadena1, cadena2;
				if (indiv[s][c] == 1)
					cadena1 = ams.getChar(s, tamanyoNumeroSecuencias[s]);
				else
					cadena1 = '-';
				for (int t = s + 1; t < numeroSecuencias; t++) {
					if (indiv[t][c] == 1)
						cadena2 = ams.getChar(t, tamanyoNumeroSecuencias[t]);
					else
						cadena2 = '-';
					double distancia = 0;
					if (cadena1 == '-' && cadena2 == '-')
						distancia = 0;
					else if (cadena1 == '-') {
						if (c > 0 && indiv[s][c - 1] == 0
								&& !ultimoAlgoritmoGenetico)
							distancia = -0.2;
						else
							distancia = -3;
					} else if (cadena2 == '-') {
						if (c > 0 && indiv[t][c - 1] == 0
								&& !ultimoAlgoritmoGenetico)
							distancia = -0.2;
						else
							distancia = -3;
					} else if (cadena1 != '-' && cadena2 != '-')
						try {

							if (cadena1 == 'u' || cadena2 == 'u') {
								System.out.println(cadena1 + " " + cadena2);
								System.out.println(s + " " + t + " " + c);
							}
							distancia = ADN.dameDistancia(cadena1, cadena2);
						} catch (Exception e) {
							e.printStackTrace();
						}

					sumaDePares[c] += distancia;
				}
			}

			boolean coincidencia = true;
			char e = columna[0];
			for (int i = 1; i < indiv.length; i++) {
				if (columna[i] != e)
					coincidencia = false;
			}
			if (coincidencia && e != '-') {
				coincidencias++;
				// Multiplcamos las puntuaciones.
				sumaDePares[c] *= 2;
			}
		}

		// Calculamos la suma total.
		for (int c = 0; c < tamanyoGap; c++)
			sumaTotal += sumaDePares[c];

		return sumaTotal;
	}

	public double mejorResultado() {
		double[] mejor = new double[numeroPoblacion];
		for (int k = 0; k < numeroPoblacion; k++) {
			mejor[k] = 0;
			for (int i = 0; i < fitness.get(k).size(); i++) {
				if (mejor[k] < fitness.get(k).get(i)) {
					mejor[k] = fitness.get(k).get(i);
					if (eliteF < fitness.get(k).get(i)) {
						eliteI[0] = k;
						eliteI[1] = i;
						eliteI[2] = 0;
						vector_eliteIndividual = new Integer[numeroSecuencias][tamanyoGap];
						for (int j = 0; j < numeroSecuencias; j++) {
							vector_eliteIndividual[j] = copiar(vectorAlgoritmoGenetico
									.get(eliteI[0]).get(eliteI[1])[j]);
						}
					}
				}
			}
			for (int i = 0; i < nuevo_vectorFitness.get(k).size(); i++) {
				if (mejor[k] < nuevo_vectorFitness.get(k).get(i)) {
					mejor[k] = nuevo_vectorFitness.get(k).get(i);
					if (eliteF < nuevo_vectorFitness.get(k).get(i)) {
						eliteI[0] = k;
						eliteI[1] = i;
						eliteI[2] = 1;
						vector_eliteIndividual = new Integer[numeroSecuencias][tamanyoGap];
						for (int j = 0; j < numeroSecuencias; j++) {
							vector_eliteIndividual[j] = copiar(nuevo_vectorAlgoritmoGenetico
									.get(eliteI[0]).get(eliteI[1])[j]);
						}
					}
				}
			}
		}
		elites = mejor;
		for (int i = 0; i < numeroPoblacion; i++) {
			if (elites[i] > eliteF) {
				eliteF = elites[i];
			}
		}
		return eliteF;
	}

	/*
	 * Ordenar los valores del array con los ’ndices del segundo argumento.
	 */
	public void ordenar(Double[] arg, Integer[] arg2) {
		boolean done = true;
		for (int i = 0; i < arg.length - 1; i++) {
			Double a = arg[arg2[i]];
			Double b = arg[arg2[i + 1]];
			if (b > a) {
				int temp = arg2[i];
				arg2[i] = arg2[i + 1];
				arg2[i + 1] = temp;
				done = false;
			}
		}
		if (done)
			return;
		else
			ordenar(arg, arg2);
	}

	// returns a copy of an integer array
	public Integer[] copiar(Integer[] arg1) {
		Integer[] toReturn = new Integer[arg1.length];
		for (int i = 0; i < arg1.length; i++) {
			toReturn[i] = arg1[i];
		}
		return toReturn;
	}

	private void reconstruir(Integer[][] arg1, int[] arg2) {

		int[] count = new int[numeroSecuencias];
		for (int n = 0; n < numeroSecuencias; n++) {
			count[n] = 0;
			for (int j = 0; j < tamanyoGap; j++) {
				if (arg1[n][j] == 1)
					count[n]++;
			}
		}
		// Reconstrucci—n de la matriz.
		for (int n = 0; n < numeroSecuencias; n++) {
			if (count[n] < ams.length(n)) {
				// need to add ones
				while (count[n] < ams.length(n)) {
					int start = (arg2 == null) ? 0 : arg2[n];
					for (int j = start; j < tamanyoGap; j++) {
						if (Math.random() < 1.0 / tamanyoGap) {
							if (arg1[n][j] == 0) {
								arg1[n][j] = 1;
								count[n]++;
								if (count[n] >= ams.length(n))
									break;
							}
						}
					}
				}
			} else if (count[n] > ams.length(n)) {
				// need to remove ones
				while (count[n] > ams.length(n)) {
					int start = (arg2 == null) ? 0 : arg2[n];
					for (int j = start; j < tamanyoGap; j++) {
						if (Math.random() < 1.0 / tamanyoGap) {
							if (arg1[n][j] == 1) {
								arg1[n][j] = 0;
								count[n]--;
								if (count[n] <= ams.length(n))
									break;
							}
						}
					}
				}
			}
		}
	}

	// Declaraci—n de variables
	private double mutacion = 0.4;
	private double cruce = 0.8;
	private double[] tasaMigracion;
	// private int intervaloMigracion = 5;
	private int intervaloMigracion = 1;

	private double[] nuevoFitness; // new fitness gain
	private double[] antiguoFitness;
	public int generacion;
	public static int tamanyoGap, numeroSecuencias;
	// public static int numeroGeneraciones = 500;
	// public static int numeroPoblacion = 5;

	public static int numeroGeneraciones = 100;
	public static int numeroPoblacion = 100;

	public Vector<Vector<Integer[][]>> vectorAlgoritmoGenetico;
	public Vector<Vector<Double>> fitness;
	public Vector<Vector<Integer[][]>> nuevo_vectorAlgoritmoGenetico;
	public Vector<Vector<Double>> nuevo_vectorFitness;
	public double eliteF;
	public int[] eliteI;
	public Integer[][] vector_eliteIndividual;
	public double[] elites;
	private double[] vector_eliteAntiguos;
	private static AlineamientoMultipleSecuencias ams;

	private Integer[][][][] poblacionNueva;
	private Double[][] fitnessNuevo;
	private Integer[][] orden;
	public double[] fitness_medio;
	public double[] fitness_minimo;
	public double[] fitness_maximo;

}
